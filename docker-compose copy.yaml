services:
  auth:
    build: ./backend/auth
    ports:
      - "8001:8000"
    volumes:
      - ./backend/auth:/app
    env_file:
      - .env                   
      - ./backend/auth/.env.local  
    depends_on:
      - db
      - broker1
      - broker2
      - broker3

  products:
    build: ./backend/products
    ports:
      - "8002:8000"
    volumes:
      - ./backend/products:/app
    env_file:
      - .env                   
      - ./backend/auth/.env.local  
    depends_on:
      - db
      - broker1
      - broker2
      - broker3

  orders:
    ports:
      - "8003:8000"
    build: ./backend/orders
    volumes:
      - ./backend/orders:/app
    env_file:
      - .env                   
      - ./backend/auth/.env.local  
    depends_on:
      - db
      - broker1
      - broker2
      - broker3

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: nexmods
      POSTGRES_PASSWORD: nexmods_password
      POSTGRES_DB: nexmods
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Replace with your own cloud Kafka by setting KAFKA_BOOTSTRAP_SERVERS

  kafka-setup:
    image: busybox
    depends_on:
      - broker1
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "echo 'Esperando a que broker1 termine el formato...' && \
      while ! grep -q 'Kafka setup finished' /bitnami/kafka/logs/server.log 2>/dev/null; do sleep 1; done && \
      echo 'broker1 listo'"
    volumes:
      - broker1_data:/bitnami/kafka

  broker1:
    image: bitnami/kafka:latest
    container_name: kafka-broker1
    hostname: kafka-broker1
    environment:
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-broker1:9093,2@kafka-broker2:9093,3@kafka-broker3:9093
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - broker1_data:/bitnami/kafka
    ports:
      - "9092:9092"

  broker2:
    image: bitnami/kafka:latest
    container_name: kafka-broker2
    hostname: kafka-broker2
    depends_on:
      - kafka-setup
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9094,CONTROLLER://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-broker1:9093,2@kafka-broker2:9095,3@kafka-broker3:9095
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - broker2_data:/bitnami/kafka
    ports:
      - "9094:9094"

  broker3:
    image: bitnami/kafka:latest
    container_name: kafka-broker3
    hostname: kafka-broker3
    depends_on:
      - kafka-setup
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9096,CONTROLLER://:9097
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-broker1:9093,2@kafka-broker2:9095,3@kafka-broker3:9097
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - broker3_data:/bitnami/kafka
    ports:
      - "9096:9096"

  kafka-init:
    image: bitnami/kafka:latest
    container_name: kafka-init
    depends_on:
      - broker1
      - broker2
      - broker3
    volumes:
      - ./backend/kafka/init-topics.sh:/init-topics.sh
    entrypoint: ["/bin/bash", "/init-topics.sh"]
volumes:
  postgres_data:
  broker1_data:
  broker2_data:
  broker3_data: